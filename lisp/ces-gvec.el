;; A vector that automatically grows
(defun gvec-new (&optional length grow)
  (let ((vector (make-vector (or length 64) nil))
        (grow (or grow 0.8))
        (length (or length 64))
        (index 0))
    (lambda(action &rest cargs)
      (cond
       ((equal action 'insert)
        (let ((arg-value (car cargs)))
          (when (> index (* grow length) )
            (setq vector (vconcat vector (make-vector length nil)))
            (setq length (* 2 length)))
          (aset vector index arg-value)
          (setq index (+ index 1))
          (- index 1)))
       ((equal action 'get )
        (let ((arg-index (car cargs)))
          (when (> index arg-index)
            (aref vector arg-index))))
       ((equal action 'keys)
        (let (ret (ind 0))
          (mapc (lambda(x)
                  (when x (push ind ret))
                  (setq ind (+ ind 1)))
                vector)
          ret))
       ((equal action 'set )
        (let ((arg-index (car cargs))
              (arg-value (cadr cargs)))
          (when (> index arg-index)
            (aset vector arg-index arg-value))))
       ((equal action 'vector) vector)
       ((equal action 'index) index)))))

(defun gvec-insert (value gvec)
  (funcall gvec 'insert value))

(defun gvec-get (index gvec)
  (funcall gvec 'get index))

(defun gvec-set (index value gvec)
  (funcall gvec 'set index value))

(defun gvec-rem (index gvec)
  (funcall gvec 'set index nil))

(defun gvec-to-vector ( gvec)
  (funcall gvec 'vector))

(defun gvec-keys (gvec)
  (funcall gvec 'keys))

(defun gvec-index (gvec)
  (funcall gvec 'index))
